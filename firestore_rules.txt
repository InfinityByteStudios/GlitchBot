rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User-specific data access
    match /users/{userId} {
      // Users can only access their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Chat conversations
      match /chats/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Chat messages subcollection
        match /messages/{messageId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
          allow create: if request.auth != null && 
                          request.auth.uid == userId &&
                          validateMessage(request.resource.data);
        }
      }
      
      // User profile data
      match /profile/{profileId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User settings
      match /settings/{settingId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User statistics
      match /stats/{statId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Training data collection (for AI improvement)
    match /training_data/{dataId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && validateTrainingData(request.resource.data);
      allow write: if false; // Prevent modification after creation
    }
    
    // Global app data (read-only for authenticated users)
    match /app/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only via server
    }
    
    // Model performance metrics
    match /model_metrics/{metricId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow write: if false; // Prevent modification after creation
    }
  }
  
  // Helper function for message validation
  function validateMessage(data) {
    return data.keys().hasAll(['content', 'type', 'timestamp', 'userId']) &&
           data.content is string &&
           data.content.size() > 0 &&
           data.content.size() <= 10000 &&
           data.type in ['user', 'assistant'] &&
           data.userId == request.auth.uid;
  }
  
  // Helper function for training data validation
  function validateTrainingData(data) {
    return data.keys().hasAll(['input', 'output', 'timestamp', 'userId']) &&
           data.input is string &&
           data.output is string &&
           data.input.size() > 0 &&
           data.input.size() <= 10000 &&
           data.output.size() > 0 &&
           data.output.size() <= 10000 &&
           data.userId == request.auth.uid;
  }
}
